String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")});var xDebug=!0;function xlog(a){xDebug&&console.log("data-x: "+a)}function DataX(){"undefined"===typeof window.dataX&&(this.locale="eng",this.getByAttr="querySelectorAll"in document?this.getByAttrQS:this.getByAttrFB,this.queueSet=[],this.isReady=!1,this.ids={},this.refId=0,this.refCleanupTimeout=null,this.refCleanupRate=1E3,this.inst=[],this.readyQueue=[],this.lang={},window.dataX=this)}
DataX.prototype.dot=function(a,b){b=!0===b||1===b;var e=a.split("."),c=e.length-1,d=null,f=null;if(0===c)d=window,f=e[0];else{d=window[e[0]];f=e[c];b&&"undefined"===typeof d&&(d=window[e[0]]={});for(var g=1;g<c;g++)d=d[e[g]],b&&"undefined"===typeof d&&(d=d[e[g]]={})}b&&"undefined"===typeof d[f]&&(d[f]={});return{obj:d,key:f}};DataX.prototype.enter=function(a){a=a||window.event;return 13===(a.charCode?a.charCode:a.keyCode)?!0:!1};
DataX.prototype.set=function(a,b,e,c){if("undefined"!==typeof b)try{var d=-1===a.indexOf(".")?"window."+a:a,f=this.dot(d,!0);f.obj[f.key]=b}catch(g){console.log("Error setting value."+g)}if(c||this.isReady)if(b=this.getByAttr(document,'[data-x-bindto="'+a+'"]'),"undefined"===typeof b||0===b.length)console.log("no binds for "+a);else for(a=0,c=b.length;a<c;a++){if(d=b[a],d!==e){var h=d.getAttribute("data-x-bindfn"),m=this.refId;if(-1!==h.indexOf("_view_"))var l=d.getAttribute("data-x-id"),h=h.replace("_view_",
l);else l=null;f=this.dot(h);"undefined"===typeof f.obj[f.key]?console.log(h+" does not exist"):(console.log("bindfn="+h),f=f.obj[f.key](),m=this.refId-m,0<m&&console.log("numRefs = "+m),m=this.createElement(f),null!==l&&m.setAttribute("data-x-id",l),d.hasAttribute("data-x-render")?(f=d.getAttribute("data-x-render"),f=this.dot(f),f.obj[f.key](d,m)):d.parentNode.replaceChild(m,d))}}else this.queueSet.push([a,b,e])};
DataX.prototype.setItem=function(a,b,e){var c=this.dot(a);b=b.toString();"undefined"!==typeof e&&(c.obj[c.key][b]=e);a=this.getByAttr(document,'[data-x-bindto="'+a+'"]');e=a.length;for(c=0;c<e;c++){for(var d=a[c],f=null,g=d.childNodes,h=0,m=g.length;h<m;h++){var l=g[h];if(1===l.nodeType&&l.hasAttribute("data-x-index")&&l.getAttribute("data-x-index")===b){f=l;break}}null!==f&&(f=d.getAttribute("data-x-bindfn"),f=this.dot(f),f=f.obj[f.key](b).trim(),f=this.createElement(f),d.replaceChild(f,l))}};
DataX.prototype.getParent=function(a,b,e){for(b=!0!==e?b.toUpperCase():b;(a=a.parentElement)&&a.tagName!==b;);return a.tagName===b?a:null};DataX.prototype.childOf=function(a,b){for(;(a=a.parentNode)&&a!==b;);return!!a};DataX.prototype.getTarget=function(a){a||(a=window.event);a=a.target?a.target:a.srcElement;3==a.nodeType&&(a=a.parentNode);return a};DataX.prototype.getByAttrQS=function(a,b){return a.querySelectorAll(b)};
DataX.prototype.getByAttrFB=function(a,b){var e=b.indexOf("["),c=b.indexOf("]",e),d=0===e?"*":b.substring(0,e),f=b.indexOf("=");if(-1<f){var e=b.substring(e+1,f),g=b.substring(f+1,c),c=g.charAt(0);if('"'===c||"'"===c)g=g.substring(1,g.length-1)}else e=b.substring(e+1,c);for(var c=[],d=a.getElementsByTagName(d),h=0,m=d.length;h<m;h++){var l=d[h].getAttribute(e);null!==l&&""!==l&&(-1!==f&&l!=g||c.push(d[h]))}return c};
DataX.prototype.getFirstTag=function(a){for(a=a.firstChild;1!=a.nodeType;)a=a.nextSibling;return a};DataX.prototype.createElement=function(a){var b=document.createElement("div");b.innerHTML=a;return b.firstChild};
DataX.prototype.afterParse=function(){if(0!==this.parsing&&this.parseWait++<this.parseWaitMax)console.log(this.parsing),this.parseWait++,setTimeout(afterParse,10);else if(this.parseWait>=this.parseWaitMax)console.log("waited too long for parse source to load");else{for(var a=document.querySelectorAll("[data-x-ctrl]"),b=0,e=a.length;b<e;b++){var c=a[b],d=c.getAttribute("data-x-ctrl"),f=c.hasAttribute("data-x-view")?c.getAttribute("data-x-view"):c.getAttribute("data-x-viewtype"),g=this.dot(f),g=g.obj[g.key];
if(""===d||"null"===d)h=null;else{var h=this.dot(d),h=h.obj[h.key];h&&(h._ctrl_=d)}var m=c.hasAttribute("id")?c.getAttribute("id"):c.tagName;""===d&&(d="null");d="new "+f+'("'+m+'", '+d+", true) ";try{var l=new g(c,h,!0);console.log(d+l.id)}catch(n){console.log("ERROR: "+d),console.log(n)}}for(b=0;b<this.queueSet.length;b++)a=this.queueSet[b],this.set(a[0],a[1],a[2],!0);this.queue=[];this.isReady=!0}};
DataX.prototype.init=function(){xlog("Inside of DataX.init");this.parsing=0;"undefined"!==typeof this.parse&&this.parse.init();this.parseWaitMax=1E3;this.parseWait=0;this.afterParse();for(var a=0,b=this.readyQueue.length;a<b;a++)this.readyQueue[a]();this.readyQueue=""};DataX.prototype.htmlEncode=function(a){var b={"&":"&amp;","'":"&#39;",'"':"&quot;","<":"&lt;",">":"&gt;"};return(a+"").replace(/[&"'\<\>]/g,function(a){return b[a]})};
DataX.prototype.htmlDecode=function(a){var b=b={amp:"&","#39":"'",quot:'"',lt:"<",gt:">"};return(a+"").replace(/&(amp|quot|lt|gt|(#)([0-9]*));/g,function(a,c,d,f){return"#"===d?String.fromCharCode(Number(f)):b[c]})};DataX.prototype.namespace=function(a,b){xlog("Creating namespace '"+a+"'");for(var e=window,c=a.split("."),d=c.length-1,f=0;f<d;f++)var g=c[f],e=g in e?e[g]:e[g]={};e[c[f]]="undefined"!==typeof b?b:{}};
DataX.prototype.ref=function(a){var b="R"+this.refId++ +"_";this.ids[b]=a;return"dataX.ids."+b};DataX.prototype.refCleanup=function(){null===this.refCleanupTimeout&&(this.refCleanupTimeout=setTimeout(this.refCleanupNow,this.refCleanupRate))};DataX.prototype.refCleanupNow=function(){clearTimeout(this.refCleanupTimeout);var a={};document.documentElement.innerHTML.replace(/dataX\.ids\.(R[0-9]*_)/g,function(b,e){a[e]=this.ids[e]});this.ids=a;this.refCleanupTimeout=null};
DataX.prototype.item=function(a){return a.replace(/\[([0-9]*)\]/g,".$1")};DataX.prototype.instance=function(a){this.inst.push(a);return"dataX.inst."+(this.inst.length-1)};DataX.prototype.loadLanguage=function(a,b){if("undefined"!==typeof this.lang[a]){var e=this.lang[a];for(locale in e)if("undefined"===typeof b[locale])b[locale]=e[locale];else for(key in e[locale])b[locale][key]=e[locale][key]}};
DataX.setLocale=function(a){this.locale=a;for(var b=this.getByAttr(document,"[data-x-id]"),e=0,c=b.length;e<c;e++){var d=b[e],f=d.getAttribute("data-x-id");console.log("refId="+f);f=this.dot(f);f=f.obj[f.key];d=this.getByAttr(d,"[data-x-msg]");j=0;for(jlen=d.length;j<jlen;j++)for(var g=d[j].getAttribute("data-x-msg").split(","),h=0,m=g.length;h<m;h++){var l=g[h].split(":");2===l.length?d[j].innerHTML=f.content(a,l[0],l[1]):3===l.length&&d[j].setAttribute(l[1],f.content(a,l[0],l[2]))}}};
DataX.prototype.ready=function(a){"function"!==typeof a?console.error('dataX.ready: Expected type "function" and instead recieved type "'+typeof a+'".'):this.readyQueue.push(a)};DataXException=function(a){return{message:a,type:"XO Exception"}};DataXException.prototype.toString=function(){return this.type+": "+this.message};var datax=new DataX;function ParseDataX(){xlog("Creating a new ParseDataX...")}ParseDataX.prototype.toCommentScript=function(a){return"undefined"===typeof a?"":"\x3c!--% "+a.replace(/--/g,"-\\-")+" %--\x3e"};ParseDataX.prototype.init=function(){xlog("running ParseDataX.init");this.parseViews(document)};ParseDataX.prototype.jsStr=function(a){return a.replace(/['\n\r\\]/g,function(a){return"\n"===a?"\\n":"\r"===a?"\\r":"\\"+a})};
ParseDataX.prototype.findOrphans=function(a){var b=0;a=dataX.getByAttr(a,"[data-x-bind]");dataX.namespace("app._orphan",{});for(var e=a.length-1;-1<e;e--){var c=a[e];console.log(c);c.setAttribute("data-x-view","app._orphan.view_"+b++);c.setAttribute("data-x-ctrl","");new ViewBuilder(c)}};
ParseDataX.prototype.parseViews=function(a){xlog("Running parseViews");for(var b=dataX.getByAttr(a,"[data-x-view]"),e=b.length-1;-1<e;e--)new ViewBuilder(b[e]);a.getAttribute?(b=a.getAttribute("data-x-view"),null!==b&&""!==b?new ViewBuilder(a):this.findOrphans(a)):this.findOrphans(a)};
ParseDataX.prototype.parseMsg=function(a){var b=0,e=[];a=a.replace(/\\*\{\{(?:[^}\\]*|\\.)*\}\}/g,function(a){var d=0;if("\\"===a.charAt(0)){for(var f=!0,d=1;"\\"===a.charAt(d++);)f=!f;if(f)return a}a=a.replace(/\\}/g,"}");e.push("("+a.substring(d+2,a.length-2)+")");return"{"+b++ +"}"});return{text:a,vars:e}};
ParseDataX.prototype.commentScript=function(a,b){a=a.replace(/data-el-/g,"");a=a.replace(/data-x-checked="([\s\S]*?)"/g,"$1");return a=a.replace(/\\*\x3c!--\%(?:[\s\S]*?)\%--\x3e|\\*\{\{(?:[^}\\]*|\\.)*\}\}/g,function(a,c,d){c=0;if("\\"===a.charAt(0)){d=!0;for(c=1;"\\"===a.charAt(c++);)d=!d;if(d)return a}if("{"===a.charAt(c))return a=a.replace(/\\}/g,"}"),a=a.substring(c+2,a.length-2),"#"===a.charAt(0)?"<%"+a+"%>":"VAR:"===a.substr(0,4)?(a=parseInt(a.substr(4)),"<%=this.vars["+a+"]=dataX.ref(["+b.vars[a].join(",")+
"]).split('.')[2]%>"):"<%="+dataX.htmlDecode(a)+"%>";a=a.substring(c+5,a.length-4);return"<%"+a.replace(/-\\-/g,"--")+"%>"})};
ParseDataX.prototype.tmpl=function(a,b){var e=0,c="\n",c=c+"\tif (typeof this.controller !== 'undefined') {var _ctrl_ = this.controller;}\n",c=c+"\tvar RET = '",d=this;a.replace(/<\%([\s\S]*?)\%>/g,function(b,f,m){var l=a.slice(e,m);""!=l&&(c+=d.jsStr(l));switch(f.charAt(0)){case "=":c="="===f.charAt(1)?c+("' + dataX.htmlEncode("+f.slice(2)+") + '"):c+("' + ("+f.slice(1)+") + '");break;case "#":c+="' + dataX.ref("+f.substr(1)+") + '";break;default:c+="';"+f+";RET += '"}e=m+b.length});var f=a.slice(e);
0<f.length&&(c+=d.jsStr(f));c+="';\n;";c+="if (typeof _ctrl_ !== 'undefined') {\n";c+="\t;RET = RET.replace(/_ctrl_/g, _ctrl_._ctrl_);\n";c+="}\n";return c+="return RET;"};ParseDataX.prototype.tplFn=function(a){return a.toString().replace(/^function[^\{]*\{([\s\S]*)}$/,"$1")};ParseDataX.prototype.setTPL=function(a,b){var e=[];for(k in a)e.push(k);e="TPL_("+e.join("|")+")";return b.replace(new RegExp(e,"g"),function(b,d){for(k in a)if(d===k)return a[k];return d})};
function adler32(a){for(var b=0,e=1,c=0,d=a.length;b<d;)e+=a.charCodeAt(b++),c+=e;return c%65521<<16|e%65521}"undefined"===typeof dataX?console.error("Include dataX.js before dataX.parse."):dataX.parse=new ParseDataX;
//parse.parseView = function(el);
//var dataX = window.dataX;
//var parse = dataX.parse;
function ViewBuilder(el) {
	xlog("Running ViewBuilder");
	this.el = el;

	//The generated source will replace TPL_{vars.key} with the value of vars[key]
	var TPL_vars = {
		bindMethods: null,
		namespace: null,
		render: null,
		msg: null
	};

	this.namespace = TPL_vars.namespace=el.getAttribute('data-x-view');
	this.bindSrc = []; // Source code to be attached to the document.
	this.bindId = 0; // An id number for unique bind functions in this view class.
	this.msg = {}; // A text dictionary for translations.

	//.vars - array to hold preprocessing vars for substition
	// ${VAR:n} will be replaced with contents of .vars[n]
	this.vars = [];
	this.parseAttrs(); // Parse data-x attributes and data-x-bind functions.

	TPL_vars.bindMethods = this.bindSrc.join('\n\n') + "\n\n";
	var src = el.innerHTML;
	el.innerHTML = ""; // clear for doc view

	try {
		src = dataX.parse.commentScript(src, this); // Parse bind language to <%...%> for tmpl parser
	} catch (err) {
		console.log("View '" + this.namespace + "': Error parsing view render.\n\n" + src);
		throw(err);
	}

	try {
		TPL_vars.render = dataX.parse.tmpl(src, this.namespace); // Parse <%..%> to javascript
	} catch (err) {
		console.log("View '" + this.namespace + "': Error parsing template. \n\n" + src);
		throw(err);
	}

	var fn = null;

	TPL_vars.msg=JSON.stringify(this.msg);
	// bindMethods, render, namespace, msg

	src = dataX.parse.setTPL(TPL_vars, ViewBuilder.viewTemplate);

	console.log(src);
	// TODO: do a namespace check after writing script. If namespace does not
	// appear then there was a problem.
	try {
		xlog("Wrting script to docuemnt.");
		dataX.parsing++;
		var script = document.createElement("script");
		script.setAttribute("type", "text/javascript");
		try {
			script.appendChild(document.createTextNode(src+'\ndataX.parsing--'));
		} catch (e) {
			xlog("Could not createTextNode for script. adding text as property.")
			script.text = src+'\ndataX.parsing--';
		}
		document.body.appendChild(script);
	} catch (err) {
		console.log('Error creating view class "' + this.namespace + '". \n\n' + err);
		fn = new Function ("","return 'ERROR';");
	}
}

ViewBuilder.prototype.parseAttrs = function() {
	var baseElement = this.el;
	var nextIter = 0;

	var list = dataX.getByAttr(baseElement, '[data-on-dblclick]');

	for (var i = 0, len = list.length; i < len; i++) {
		var el = list[i];
		var value = el.getAttribute('data-on-dblclick');
		value = "if (dataX.dbl(this)) \{ " + value + "; \}";
		el.setAttribute('data-el-onclick', value);
	}

	var list = dataX.getByAttr(baseElement, '[data-x-checked]');

	for (var i = 0, len = list.length; i < len; i++) {
		var el = list[i];
		var value = el.getAttribute('data-x-checked');
		value = "{{(" + value + ") ? 'checked=\\'yes\\'' : ''}}";
		el.setAttribute('data-x-checked', value);
	}

	var list = dataX.getByAttr(baseElement, '[data-x-if]');

	for (var i = 0, len = list.length; i < len; i++) {
		var el = list[i];
		var beginIf = "<!--%\n\tif (" + dataX.htmlDecode(el.getAttribute('data-x-if')) + ") { //data-x-if \n\t\t%-->";
		var endIf = "<!--%\n\t}  //end data-x-if \n\n\t%-->";
		el.insertAdjacentHTML('beforebegin', beginIf);

		var sib = el;
		var last = el;

		while(sib !== null) {

			sib = sib.nextSibling;

			if (sib === null || sib.nodeType !== 1) {
				continue; // only concerned with element nodes
			} else if (sib.hasAttribute('data-x-else')) {
				var elseStr = sib.getAttribute('data-x-else');
				if (elseStr !== "") {
					// todo: clean code for comment script (-- to -\-)
					beginElse = "<!--%\n\t} else if (" + dataX.htmlDecode(elseStr) + ") { // data-x-else \n\t\t%-->";
				} else {
					beginElse = "<!--%\n\t} else { // data-x-else \n\t\t%-->";
				}

				sib.insertAdjacentHTML('beforebegin', beginElse);
				last = sib; // last sibling element
			} else {
				sib = null; // not an else node
			}
		}

		last.insertAdjacentHTML('afterend', endIf);
	}

	var list = dataX.getByAttr(baseElement, 'script[type="text/xo-js"]'); //script[type="text/xo-js"]');

	for (var i = 0, len = list.length; i < len; i++) {
		var el = list[i];
		var source = "<!--%" + el.innerHTML.replace(/--/g,"-\\-") + "%-->";
		el.outerHTML = source;
	}

  // data-x-msg Makes a dictionary entry for key with the value of the innerHTML or attribute.
  // data-x-msgn="key,attribute:key"
  // The parsing process adds a refId for variable substitution
	var list = dataX.getByAttr(baseElement, '[data-x-msg]');
	var origin = dataX.locale;// TODO: dataX.locale should be replaced with module locale.
	if (typeof this.msg[origin] === "undefined") {
		this.msg[origin] = {}; // create dictionary if it doesn't exist.
	}
	for(var i = 0, len=list.length; i < len; i++) {
		var el=list[i];
		var keys = el.getAttribute('data-x-msg').split(',');
		var dataMsg = [];
		for (var j =0, jlen=keys.length; j < jlen; j++) {
			var pair = keys[j].split(':');
			var varIndex = this.vars.length;
			if (pair.length === 1) {// innerHTML
				var key = pair[0];
				var msg = dataX.parse.parseMsg(el.innerHTML);
				var attrName = '';
				el.innerHTML="{{this.content('" + origin + "','" + key + "',this.vars[" + varIndex + "])}}";
			} else if(pair.length === 2) {// attribute:key
				// if data-el-attr exists wrap.. else grab el.attr, wrap and put into data-el-attr
				var elAttr = 'data-el-'+pair[0];
				var key = pair[1];
				var attr = (el.hasAttribute(elAttr)) ? el.getAttribute(elAttr) : el.getAttribute(pair[0]);
				var msg = dataX.parse.parseMsg(attr);
				var attrName = pair[0] + ':';
				attr = "{{this.content('" + origin + "','" + key + "',this.vars[" + varIndex + "])}}"
				el.setAttribute(elAttr,attr);
			}
			if (typeof this.msg[origin][key] !== "undefined") {
				console.log('NOTICE: ' + this.namespace + '.msg["' + key + '"] exists. Key should only be defined once.');
			}
			this.vars[varIndex] = msg.vars;
			this.msg[origin][key]=[adler32(msg.text),msg.text];
			dataMsg.push(key+":" + attrName + "{{VAR:"+varIndex+"}}"); // will parse to  ${this.vars[varIndex]=dataX.ref(ViewClass.vars[varIndex])}
		}
		el.setAttribute("data-x-msg",dataMsg.join(','));
	}

	var list = dataX.getByAttr(baseElement, '[data-x-each]');

	for (var i = 0, len = list.length; i < len; i++) {
		var el = list[i];
		var str = el.getAttribute('data-x-each')
		var parts = str.split(':');
		if (parts.length !== 2) {
			console.log('data-x-each should be arrName:item not "' + str + '"');
			continue; // bad syntax
		}
		var arrName = parts[0];
		var itemName = parts[1];
		parts = dataX.parse.setTPL({
			arr: parts[0],
			item: parts[1],
			name: parts[0].replace(/\./g,"_") // array name for iter and len
		}, ViewBuilder.eachTemplate).split('TPL_SPLIT');
		el.insertAdjacentHTML('afterbegin', dataX.parse.toCommentScript(parts[0]));
		el.insertAdjacentHTML('beforeend', dataX.parse.toCommentScript(parts[1]));
	}

  // data-x-each="arrName:itemName"
  // var arrName_len = arrName.length;
  // var arrName_i = 0;

  var list = dataX.getByAttr(baseElement, '[data-x-js]');

  for (var i = 0, len = list.length; i < len; i++) {
	var el = list[i];
	var js = el.getAttribute('data-x-js'); // htmlDecode?
	// Comments do not allow "--".
	js = js.replace("--", "-\\-"); //.trim();
	var beginJs = "<!--% " + js + " { %-->";
	var endJs = "<!--% } %-->";

	// if and else statments surround element.
	if (js.substr(0,2) === 'if') {
	  // insertBefore
	  el.insertAdjacentHTML('beforebegin', beginJs);
	  el.insertAdjacentHTML('afterend', endJs);
	} else if (js.substr(0,4) === 'else') {
	  // Text can not be output between if and else statements.
	  // If the prevous node is a text node clear text.(?non whitespace)
	  if (el.previousSibling.nodeType === 3) {
		el.previousSibling.nodeValue = "";
	  }
	  el.insertAdjacentHTML('beforebegin', beginJs);
	  el.insertAdjacentHTML('afterend', endJs);
	} else {
	  // for loops put the statement inside of the element.
	  el.insertAdjacentHTML('afterbegin', beginJs);
	  el.insertAdjacentHTML('beforeend',endJs);
	}
  }

	// bind elements to variables
	var bindElements = dataX.getByAttr(baseElement, '[data-x-bind]');
	var i = bindElements.length;

	while(i--) {
		this.doBind(bindElements[i], false);
	}

	if (!baseElement.getAttribute) return;
	var baseBind = baseElement.getAttribute('data-x-bind');
	if (baseBind !== "" && baseBind !== null) {
		this.doBind(baseElement, true);
	}
};


ViewBuilder.prototype.doBind = function(el, isBaseElement) {
	var varName = el.getAttribute('data-x-bind');
	if (varName.charAt(0) === '@') {
		this.bindList(varName, el, isBaseElement);
	} else {
		this.bindEl(varName, el, false, isBaseElement);
	}

	el.setAttribute('data-x-isbound', 'yes'); // set an attribute telling wrapping nodes this is bound.
	el.innerHTML = "<!-- bind complete -->"; // remove template contents to prevent wrapping nodes from processing.
};

ViewBuilder.prototype.bindList = function(varName, el, isBaseElement) {
    // @varName:itemName - shorthand bind foreach
    var parts = varName.substring(1).split(':');

    if (parts.length !== 2) {
    	console.log('Wrong bind syntax. ' + varName);
    	return;
    }

    // Replacements for TPL_varname, and TPL_itemname.
    var reps = {
      varname: parts[0],
      itemname: parts[1]
    };

    var filter = el.getAttribute('data-x-filter');
    reps.filter = (filter) ? "if(!("+filter+"))continue;" : "";

    // TODO: Explore idea of using a ref for item to allow for changing
    // value of item reference and binding instead of iteration index/key.
    /*
    if (el.hasAttribute('data-x-ref') && el.getAttribute('data-x-ref') === 'true') {
      reps.itemvalue = "dataX.ref(" + reps.itemname + ")"
    } else {
      reps.itemvalue = "'" + reps.varname + "[' + _index_ + ']'"
    }
    */

    var parts = dataX.parse.setTPL(reps, ViewBuilder.bindTemplate).split('TPL_SPLIT');
    el.insertAdjacentHTML('afterbegin', dataX.parse.toCommentScript(parts[0]));
    el.insertAdjacentHTML('beforeend', dataX.parse.toCommentScript(parts[1]));
    this.bindEl(reps.varname, el, true, isBaseElement);
};

ViewBuilder.prototype.bindEl = function(varName, el, hasLoop, isBaseElement) {
  // Should local name default to the last name from namespace.something.varName?
  var localName = null; // Local name for global var if exists.
  var sep = varName.indexOf(':'); // Seperator for localName

  // If there is a seperator then extract the localName.
  if (sep > 0) {
      localName = varName.substr(sep + 1);
      varName = varName.substr(0,sep);
  }

  var bindId = this.bindId++;
  var fnStr = this.namespace + ".bind[" + bindId + "]";


  // x-bindto is set in order to use varName:localName and @varName:iterName
  // We only search data-x-bindto for root variable name.
  el.setAttribute('data-x-bindto', varName);

  if (isBaseElement === true) {
  	// bind function is a prototype so it does not exist.
    //el.setAttribute('data-x-bindfn', el.getAttribute('data-x-view') + '.bind_' + bindId);
    el.setAttribute('data-x-bindfn', '_view_.bind_' + bindId);
  } else {
    el.setAttribute('data-x-bindfn', "{{this.id}}.bind_" + bindId);
    el.outerHTML = "{{this.bind_" + bindId + "()}}";
  }

  var fnsrc = el.outerHTML;
  var id = el.getAttribute('id');
  var src  = "";
  src = dataX.parse.commentScript(fnsrc, this); // Parse bind language to <%...%> for tmpl parser
  src = dataX.parse.tmpl(src, id); // Parse <%..%> to javascript

  if (localName !== null) {
    src = "var " + localName + " = " + varName + ";\n" + src;
  }

  var srcHeader =  this.namespace + ".prototype.bind_" + bindId + " = function(";
  srcHeader += (hasLoop === true) ? "_index_" : "";
  srcHeader += "){\n\t";
  src = srcHeader + src + "\n};";
  this.bindSrc.push(src);
};

/**** TEMPLATES ****/


// A list bind template that allows for setting an index to render
// one item if needed. Also has filter applied in render loop.
ViewBuilder.bindTemplate = dataX.parse.tplFn(function () {
	var _single_ = false;
	var _len_ = 0;
	var _k_;
	var _items_ = TPL_varname;

	if (typeof _index_ !== 'undefined') {
		// Render index.
		RET = '';
		_len_ = parseInt(_index_) + 1;
		_single_ = true;
	} else {
		var _index_ = 0;
		// Render list.
		if( Object.prototype.toString.call(TPL_varname) !== '[object Array]' && TPL_varname !== null) {
			// Not an array and not null, assume it's an object.
    		_items_ = [];
    		// TODO: option to sort object keys.
    		for (_k_ in TPL_varname) _items_.push(_k_);
		}
		_len_ = _items_.length;
	}

	for (_index_; _index_ < _len_; _index_++){
		TPL_filter
		var TPL_itemname = _items_[_index_];
		TPL_SPLIT
	}

	if (_single_ === true) {
		if (typeof _ctrl_ !== 'undefined') {
			return RET.replace(/_ctrl_/g, _ctrl_._ctrl_);
		}
		return RET;
	}
});

ViewBuilder.eachTemplate = dataX.parse.tplFn(function() {
	for (var TPL_item_i=0,TPL_item_len=TPL_arr.length; TPL_item_i < TPL_item_len; TPL_item_i++) {
		var TPL_item = TPL_arr[TPL_item_i];
		TPL_SPLIT
	}
});

// viewSrc - template source code for creating a view class.
// TPL_variables are replaced.
ViewBuilder.viewTemplate = dataX.parse.tplFn(function() {
  /*******************************
  * xo compiled view
  * TPL_namespace
  *******************************/

  dataX.namespace('TPL_namespace', function(el,controller) {
	this.className = 'TPL_namespace';
	this.id = dataX.ref(this); // TODO: look at changing .id to ._view_ to match ._ctrl_ pattern
	this.vars = []; // a place to hold refIds for language parameters
	this.locale=dataX.locale;
	var self = this;

	if (arguments.length === 1) {
		var view = new TPL_namespace(null, arguments[0]);
		this.controller = arguments[0];
		return view.render();
	}

	if (typeof el !== "undefined" && el !== null) {
	  this.el = el;
	  el.setAttribute('data-x-id', this.id);
	  this.refresh = function() {self.el.innerHTML=self.render();};
	} else {
	  this.el = null;
	  this.refresh = function(__data) {return self.render(__data);};
	}

	if (typeof controller !== 'undefined' && controller !== null) {
	  this.controller = controller;
	  if (el !== null && typeof controller.onViewInit !== "undefined") {
		controller.onViewInit(this);
	  }
	  /*
		if (el.hasAttribute('data-x-init')) {
		  var d = dataX.dot(el.getAttribute('data-x-init'));
		  d.obj[d.key](this); // TODO: should we do a check for true / false to render the element?
		}
	  */
	}

	this.refresh();
  });

  /*******************************
  * Bind Methods
  *******************************/

  TPL_bindMethods

  /*******************************
  * Render
  *******************************/

  TPL_namespace.prototype.render = function() {
	with (this.controller) {
	TPL_render
	}
  };

  /*******************************
  * Translation
  *******************************/

  TPL_namespace.prototype.content = function(locale, key, refId) {
	var mylang = this.msg[locale];
	var origin = this.msg[this.locale];
	if(typeof origin === 'undefined') return '?'; // the origin language is not set.
	var reg = /{([0-9]*)}/g;
	var vars = xDoc.ids[refId];
	if (typeof vars === 'undefined') vars = []; // should this throw an error?
	var text = '';

	function replacer(match, $1) {
	  return vars[$1];
	}

	if (typeof mylang==='undefined') {
	  console.log(this.className + '. Locale "' + locale + '" not found.');
	  text = origin[key][1];
	} else if(typeof mylang[key] === 'undefined') {
	  console.log(this.className + '. No translation for "' + locale + '","' + key + ".");
	  text = origin[key][1];
	} else if(mylang[key][0] !== origin[key][0]) {
	  console.log(this.className + '. Checksum missmatch with origin "' + this.locale + '","' + key + '".');
	  text = origin[key][1];
	} else {
	  text = mylang[key][1]
	}

	text = text.replace(/data-el-/g,'');
	if (typeof this.controller !== 'undefined') {
	  text = text.replace(/_ctrl_/g, this.controller._ctrl_);
	}
	// replace variables {0},{1},{2}, etc. if exists
	if (typeof vars !== 'undefined' && vars.length > 0) {
	  return text.replace(reg, replacer);
	}
	return text;
  };

  TPL_namespace.prototype.msg = TPL_msg;
  // Load any languages that were set prior to class creation.
  dataX.loadLanguage('TPL_namespace', TPL_namespace.prototype.msg);
});
//@ sourceMappingURL=data-x.min.js.map
